# testing whith python3 -m doctest -v ./tests/1-my_list.txt

import method to test:
>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

RESULT SUCCESSFUL CASES:

Positive Numbers:
    >>> bg = BaseGeometry()
    >>> bg.integer_validator("my_int", 12)
    >>> bg.integer_validator("width", 89)

RESULT FAILED CASES:

with other values:
    >>> bg = BaseGeometry()
    >>> bg.integer_validator("my_int", None)
    Traceback (most recent call last):
    ...
    TypeError: my_int must be an integer

    >>> bg = BaseGeometry()
    >>> bg.integer_validator("my_int", "testing")
    Traceback (most recent call last):
    ...
    TypeError: my_int must be an integer

    >>> bg = BaseGeometry()
    >>> bg.integer_validator("my_int", [10,4,9])
    Traceback (most recent call last):
    ...
    TypeError: my_int must be an integer

Value less or equal to 0:
    >>> bg = BaseGeometry()
    >>> bg.integer_validator("my_int", 0)
    Traceback (most recent call last):
    ...
    ValueError: my_int must be greater than 0

    >>> bg = BaseGeometry()
    >>> bg.integer_validator("my_int", -1024)
    Traceback (most recent call last):
    ...
    ValueError: my_int must be greater than 0

Invalid Args:
    >>> bg = BaseGeometry()
    >>> bg.integer_validator("my_int")
    Traceback (most recent call last):
    ...
    TypeError: integer_validator() missing 1 required positional argument: 'value'

    >>> bg = BaseGeometry()
    >>> bg.integer_validator()
    Traceback (most recent call last):
    ...
    TypeError: integer_validator() missing 1 required positional argument: 'value'